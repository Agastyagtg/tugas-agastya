#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

// Definisi struktur Stack
typedef struct {
    char data[MAX_SIZE];
    int top;
} Stack;

// Fungsi untuk menginisialisasi stack menjadi kosong, dengan mengatur top ke nilai -1.
void initStack(Stack *s) {
    s->top = -1;
}

// Fungsi untuk memeriksa apakah stack kosong, yaitu jika top sama dengan -1.
bool isEmpty(Stack *s) {
    return s->top == -1;
}

// Fungsi untuk memeriksa apakah stack penuh, yaitu jika top sama dengan MAX_SIZE - 1.
bool isFull(Stack *s) {
    return s->top == MAX_SIZE - 1;
}

// Fungsi untuk mengambil elemen teratas dari stack tanpa menghapusnya
char peek(Stack *s) {
    if (!isEmpty(s)) {
        return s->data[s->top];
    } else {
        return 0;
    }
}

// Fungsi untuk menambahkan elemen ke dalam stack. Jika stack belum penuh, fungsi akan menaikkan top dan menambahkan data ke posisi yang sesuai.
void push(Stack *s, char data) {
    if (!isFull(s)) {
        s->top++;
        s->data[s->top] = data;
    }
}

// Fungsi untuk menghapus elemen teratas stack. Fungsi ini akan mengembalikan nilai dari elemen teratas sebelum mengurangi top.
char pop(Stack *s) {
    if (!isEmpty(s)) {
        char data = s->data[s->top];
        s->top--;
        return data;
    } else {
        return 0;
    }
}

// Fungsi utama yang menerima string sebagai argumen dan memeriksa keseimbangan tanda kurung di dalamnya. Fungsi ini menggunakan Stack untuk melacak tanda kurung yang dibuka dan belum ditutup. Jika tanda kurung yang dibaca adalah tanda kurung pembuka, ia akan dimasukkan ke dalam stack. Jika tanda kurung yang dibaca adalah tanda kurung penutup, fungsi akan memeriksa apakah tanda kurung tersebut sesuai dengan tanda kurung pembuka paling atas di stack. Jika tidak, itu berarti tanda kurung tidak seimbang dan fungsi akan mengembalikan 'N'. Setelah semua tanda kurung diproses, jika stack masih tidak kosong, itu berarti terdapat tanda kurung pembuka yang belum ditutup, sehingga fungsi akan mengembalikan 'N'. Jika stack kosong, maka tanda kurung dalam string tersebut seimbang, dan fungsi akan mengembalikan 'Y'.
char isBalanced(char *str) {
    Stack s;
    initStack(&s);

    for (int i = 0; str[i] != '\0'; i++) {
        char ch = str[i];
        if (ch == '(' || ch == '[' || ch == '{') {
            push(&s, ch);
        } else if (ch == ')' || ch == ']' || ch == '}') {
            if (isEmpty(&s)) {
                return 'N';  
            }
            char openingBracket = peek(&s);
            if ((ch == ')' && openingBracket == '(') ||
                (ch == ']' && openingBracket == '[') ||
                (ch == '}' && openingBracket == '{')) {
                pop(&s); 
            } else {
                return 'N'; 
            }
        }
    }

    if (isEmpty(&s)) {
        return 'Y'; 
    } else {
        return 'N'; 
    }
}

// Fungsi utama dari program. Di sini, pengguna diminta untuk memasukkan string yang berisi tanda kurung. Kemudian, fungsi isBalanced() dipanggil untuk memeriksa keseimbangan tanda kurung dalam string tersebut. Hasilnya dicetak, yaitu "YES" jika tanda kurung seimbang, dan "NO" jika tidak.
int main() {
    char str[MAX_SIZE];

    printf("Masukkan string tanda kurung: ");
    scanf("%s", str);

    char hasil = isBalanced(str);

    if (hasil == 'Y') {
        printf("YES\n");
    } else {
        printf("NO\n");
    }

    return 0;
}
